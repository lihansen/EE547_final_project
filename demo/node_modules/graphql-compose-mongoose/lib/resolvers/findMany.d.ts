import type { Resolver, ObjectTypeComposer, InterfaceTypeComposer } from 'graphql-compose';
import type { Model, Document } from 'mongoose';
import { FilterHelperArgsOpts, SortHelperArgsOpts, LimitHelperArgsOpts } from './helpers';
export interface FindManyResolverOpts {
    lean?: boolean;
    suffix?: string;
    filter?: FilterHelperArgsOpts | false;
    sort?: SortHelperArgsOpts | false;
    limit?: LimitHelperArgsOpts | false;
    skip?: false;
}
declare type TArgs = {
    filter?: any;
    limit?: number;
    skip?: number;
    sort?: string | string[] | Record<string, any>;
};
export declare function findMany<TSource = any, TContext = any, TDoc extends Document = any>(model: Model<TDoc>, tc: ObjectTypeComposer<TDoc, TContext> | InterfaceTypeComposer<TDoc, TContext>, opts?: FindManyResolverOpts): Resolver<TSource, TContext, TArgs, TDoc>;
export {};
//# sourceMappingURL=findMany.d.ts.map