"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeOne = void 0;
const helpers_1 = require("./helpers");
const findOne_1 = require("./findOne");
const errorCatcher_1 = require("./helpers/errorCatcher");
const payloadRecordId_1 = require("./helpers/payloadRecordId");
function removeOne(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver removeOne() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver removeOne() should be instance of ObjectTypeComposer.');
    }
    const findOneResolver = (0, findOne_1.findOne)(model, tc, opts);
    const outputTypeName = `RemoveOne${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Payload`;
    const outputType = tc.schemaComposer.getOrCreateOTC(outputTypeName, (t) => {
        t.setFields(Object.assign(Object.assign({}, (0, payloadRecordId_1.payloadRecordId)(tc, opts === null || opts === void 0 ? void 0 : opts.recordId)), { record: {
                type: tc,
                description: 'Removed document',
            } }));
    });
    const resolver = tc.schemaComposer.createResolver({
        name: 'removeOne',
        kind: 'mutation',
        description: 'Remove one document: ' +
            '1) Remove with hooks via findOneAndRemove. ' +
            '2) Return removed document.',
        type: outputType,
        args: Object.assign(Object.assign({}, (0, helpers_1.filterHelperArgs)(tc, model, Object.assign({ prefix: 'FilterRemoveOne', suffix: `${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input` }, opts === null || opts === void 0 ? void 0 : opts.filter))), (0, helpers_1.sortHelperArgs)(tc, model, Object.assign({ sortTypeName: `SortRemoveOne${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input` }, opts === null || opts === void 0 ? void 0 : opts.sort))),
        resolve: ((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const filterData = (_a = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _a === void 0 ? void 0 : _a.filter;
            if (!(typeof filterData === 'object') || Object.keys(filterData).length === 0) {
                return Promise.reject(new Error(`${tc.getTypeName()}.removeOne resolver requires at least one value in args.filter`));
            }
            resolveParams.projection = {};
            let doc = yield findOneResolver.resolve(resolveParams);
            if (resolveParams.beforeRecordMutate) {
                doc = yield resolveParams.beforeRecordMutate(doc, resolveParams);
            }
            if (doc) {
                yield doc.remove();
                return {
                    record: doc,
                };
            }
            return null;
        })),
    });
    if (!(opts === null || opts === void 0 ? void 0 : opts.disableErrorField)) {
        (0, errorCatcher_1.addErrorCatcherField)(resolver);
    }
    return resolver;
}
exports.removeOne = removeOne;
//# sourceMappingURL=removeOne.js.map