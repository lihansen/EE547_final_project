"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOne = void 0;
const helpers_1 = require("./helpers");
const errorCatcher_1 = require("./helpers/errorCatcher");
const validate_1 = require("./helpers/validate");
const payloadRecordId_1 = require("./helpers/payloadRecordId");
function createOne(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver createOne() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver createOne() should be instance of ObjectTypeComposer.');
    }
    const tree = model.schema.obj;
    const requiredFields = [];
    for (const field in tree) {
        if (tree.hasOwnProperty(field)) {
            const fieldOptions = tree[field];
            if (fieldOptions.required && typeof fieldOptions.required !== 'function') {
                requiredFields.push(field);
            }
        }
    }
    const outputTypeName = `CreateOne${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Payload`;
    const outputType = tc.schemaComposer.getOrCreateOTC(outputTypeName, (t) => {
        t.setFields(Object.assign(Object.assign({}, (0, payloadRecordId_1.payloadRecordId)(tc, opts === null || opts === void 0 ? void 0 : opts.recordId)), { record: {
                type: tc,
                description: 'Created document',
            } }));
    });
    const resolver = tc.schemaComposer.createResolver({
        name: `createOne${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}`,
        kind: 'mutation',
        description: 'Create one document with mongoose defaults, setters, hooks and validation',
        type: outputType,
        args: Object.assign({}, (0, helpers_1.recordHelperArgs)(tc, Object.assign({ prefix: 'CreateOne', suffix: `${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input`, removeFields: ['id', '_id'], isRequired: true, requiredFields }, opts === null || opts === void 0 ? void 0 : opts.record))),
        resolve: ((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const recordData = (_a = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _a === void 0 ? void 0 : _a.record;
            if (!(typeof recordData === 'object') || Object.keys(recordData).length === 0) {
                throw new Error(`${tc.getTypeName()}.createOne resolver requires at least one value in args.record`);
            }
            let doc = new model(recordData);
            if (resolveParams.beforeRecordMutate) {
                doc = yield resolveParams.beforeRecordMutate(doc, resolveParams);
                if (!doc)
                    return null;
            }
            yield (0, validate_1.validateAndThrow)(doc);
            yield doc.save({ validateBeforeSave: false });
            return {
                record: doc,
            };
        })),
    });
    if (!(opts === null || opts === void 0 ? void 0 : opts.disableErrorField)) {
        (0, errorCatcher_1.addErrorCatcherField)(resolver);
    }
    return resolver;
}
exports.createOne = createOne;
//# sourceMappingURL=createOne.js.map