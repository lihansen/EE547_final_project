"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findByIds = void 0;
const graphql_compose_1 = require("graphql-compose");
const helpers_1 = require("./helpers");
const beforeQueryHelper_1 = require("./helpers/beforeQueryHelper");
function findByIds(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver findByIds() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver findByIds() should be instance of ObjectTypeComposer.');
    }
    const aliases = (0, helpers_1.prepareNestedAliases)(model.schema);
    const aliasesReverse = (0, helpers_1.prepareAliasesReverse)(model.schema);
    return tc.schemaComposer.createResolver({
        type: tc.NonNull.List.NonNull,
        name: 'findByIds',
        kind: 'query',
        args: Object.assign(Object.assign({ _ids: tc.hasField('_id')
                ? (0, graphql_compose_1.toInputType)(tc.getFieldTC('_id')).NonNull.List.NonNull
                : '[MongoID!]!' }, (0, helpers_1.limitHelperArgs)(Object.assign({}, opts === null || opts === void 0 ? void 0 : opts.limit))), (0, helpers_1.sortHelperArgs)(tc, model, Object.assign({ sortTypeName: `SortFindByIds${tc.getTypeName()}Input` }, opts === null || opts === void 0 ? void 0 : opts.sort))),
        resolve: ((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            const args = resolveParams.args || {};
            if (!Array.isArray(args._ids) || args._ids.length === 0) {
                return Promise.resolve([]);
            }
            resolveParams.query = model.find({
                _id: { $in: args._ids },
            });
            resolveParams.model = model;
            (0, helpers_1.projectionHelper)(resolveParams, aliases);
            (0, helpers_1.limitHelper)(resolveParams);
            (0, helpers_1.sortHelper)(resolveParams);
            if (opts === null || opts === void 0 ? void 0 : opts.lean) {
                const result = (yield (0, beforeQueryHelper_1.beforeQueryHelperLean)(resolveParams)) || [];
                return Array.isArray(result) && aliasesReverse
                    ? result.map((r) => (0, helpers_1.replaceAliases)(r, aliasesReverse))
                    : result;
            }
            else {
                return (0, beforeQueryHelper_1.beforeQueryHelper)(resolveParams) || [];
            }
        })),
    });
}
exports.findByIds = findByIds;
//# sourceMappingURL=findByIds.js.map