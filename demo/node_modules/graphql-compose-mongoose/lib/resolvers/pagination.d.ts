import type { Resolver, ObjectTypeComposer, InterfaceTypeComposer } from 'graphql-compose';
import type { Model, Document } from 'mongoose';
import { PaginationTArgs, PaginationResolverOpts as _PaginationResolverOpts } from 'graphql-compose-pagination';
import { CountResolverOpts } from './count';
import { FindManyResolverOpts } from './findMany';
export declare type PaginationResolverOpts = Omit<_PaginationResolverOpts, 'countResolver' | 'findManyResolver'> & {
    findManyResolver?: Resolver;
    countResolver?: Resolver;
    countOpts?: CountResolverOpts;
    findManyOpts?: FindManyResolverOpts;
};
export declare function pagination<TSource = any, TContext = any, TDoc extends Document = any>(model: Model<TDoc>, tc: ObjectTypeComposer<TDoc, TContext> | InterfaceTypeComposer<TDoc, TContext>, opts?: PaginationResolverOpts): Resolver<TSource, TContext, PaginationTArgs, TDoc>;
//# sourceMappingURL=pagination.d.ts.map