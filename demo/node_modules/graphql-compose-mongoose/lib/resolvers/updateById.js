"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateById = void 0;
const graphql_compose_1 = require("graphql-compose");
const record_1 = require("./helpers/record");
const findById_1 = require("./findById");
const errorCatcher_1 = require("./helpers/errorCatcher");
const validate_1 = require("./helpers/validate");
const payloadRecordId_1 = require("./helpers/payloadRecordId");
function updateById(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver updateById() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver updateById() should be instance of ObjectTypeComposer.');
    }
    const findByIdResolver = (0, findById_1.findById)(model, tc);
    const outputTypeName = `UpdateById${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Payload`;
    const outputType = tc.schemaComposer.getOrCreateOTC(outputTypeName, (t) => {
        t.setFields(Object.assign(Object.assign({}, (0, payloadRecordId_1.payloadRecordId)(tc, opts === null || opts === void 0 ? void 0 : opts.recordId)), { record: {
                type: tc,
                description: 'Updated document',
            } }));
    });
    const resolver = tc.schemaComposer.createResolver({
        name: 'updateById',
        kind: 'mutation',
        description: 'Update one document: ' +
            '1) Retrieve one document by findById. ' +
            '2) Apply updates to mongoose document. ' +
            '3) Mongoose applies defaults, setters, hooks and validation. ' +
            '4) And save it.',
        type: outputType,
        args: Object.assign({ _id: tc.hasField('_id') ? (0, graphql_compose_1.toInputType)(tc.getFieldTC('_id')).NonNull : 'MongoID!' }, (0, record_1.recordHelperArgs)(tc, Object.assign({ removeFields: ['_id', 'id'], prefix: 'UpdateById', suffix: `${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input`, isRequired: true, allFieldsNullable: true }, opts === null || opts === void 0 ? void 0 : opts.record))),
        resolve: ((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const recordData = (_a = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _a === void 0 ? void 0 : _a.record;
            if (!(typeof recordData === 'object')) {
                return Promise.reject(new Error(`${tc.getTypeName()}.updateById resolver requires args.record value`));
            }
            if (!((_b = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _b === void 0 ? void 0 : _b._id)) {
                return Promise.reject(new Error(`${tc.getTypeName()}.updateById resolver requires args._id value`));
            }
            delete recordData._id;
            let doc = yield findByIdResolver.resolve(Object.assign(Object.assign({}, resolveParams), { projection: {} }));
            if (resolveParams.beforeRecordMutate) {
                doc = yield resolveParams.beforeRecordMutate(doc, resolveParams);
            }
            if (!doc) {
                throw new Error('Document not found');
            }
            if (!recordData) {
                throw new Error(`${tc.getTypeName()}.updateById resolver doesn't receive new data in args.record`);
            }
            doc.set(recordData);
            yield (0, validate_1.validateAndThrow)(doc);
            yield doc.save({ validateBeforeSave: false });
            return {
                record: doc,
            };
        })),
    });
    if (!(opts === null || opts === void 0 ? void 0 : opts.disableErrorField)) {
        (0, errorCatcher_1.addErrorCatcherField)(resolver);
    }
    return resolver;
}
exports.updateById = updateById;
//# sourceMappingURL=updateById.js.map