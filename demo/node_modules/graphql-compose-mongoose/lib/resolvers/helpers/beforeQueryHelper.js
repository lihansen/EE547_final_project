"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.beforeQueryHelperLean = exports.beforeQueryHelper = void 0;
function beforeQueryHelper(resolveParams) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!resolveParams.query || typeof resolveParams.query.exec !== 'function') {
            throw new Error('beforeQueryHelper: expected resolveParams.query to be instance of Query');
        }
        if (!resolveParams.beforeQuery) {
            return resolveParams.query.exec();
        }
        const result = yield resolveParams.beforeQuery(resolveParams.query, resolveParams);
        if (result !== undefined) {
            if (typeof (result === null || result === void 0 ? void 0 : result.exec) === 'function') {
                return result.exec();
            }
            else {
                return result;
            }
        }
        else {
            return resolveParams.query.exec();
        }
    });
}
exports.beforeQueryHelper = beforeQueryHelper;
function beforeQueryHelperLean(resolveParams) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!resolveParams.query || typeof resolveParams.query.lean !== 'function') {
            throw new Error('beforeQueryHelper: expected resolveParams.query to be instance of Query');
        }
        if (!resolveParams.beforeQuery) {
            return resolveParams.query.lean();
        }
        const result = yield resolveParams.beforeQuery(resolveParams.query, resolveParams);
        if (result !== undefined) {
            if (typeof (result === null || result === void 0 ? void 0 : result.lean) === 'function') {
                return result.lean();
            }
            else {
                return result;
            }
        }
        else {
            return resolveParams.query.lean();
        }
    });
}
exports.beforeQueryHelperLean = beforeQueryHelperLean;
//# sourceMappingURL=beforeQueryHelper.js.map