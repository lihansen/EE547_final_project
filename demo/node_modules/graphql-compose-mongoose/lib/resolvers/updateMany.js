"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMany = void 0;
const helpers_1 = require("./helpers");
const toMongoDottedObject_1 = require("../utils/toMongoDottedObject");
const beforeQueryHelper_1 = require("./helpers/beforeQueryHelper");
const errorCatcher_1 = require("./helpers/errorCatcher");
function updateMany(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver updateMany() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver updateMany() should be instance of ObjectTypeComposer.');
    }
    const outputTypeName = `UpdateMany${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Payload`;
    const outputType = tc.schemaComposer.getOrCreateOTC(outputTypeName, (t) => {
        t.addFields({
            numAffected: {
                type: 'Int',
                description: 'Affected documents number',
            },
        });
    });
    const aliases = (0, helpers_1.prepareNestedAliases)(model.schema);
    const resolver = tc.schemaComposer.createResolver({
        name: 'updateMany',
        kind: 'mutation',
        description: 'Update many documents without returning them: ' +
            'Use Query.update mongoose method. ' +
            'Do not apply mongoose defaults, setters, hooks and validation. ',
        type: outputType,
        args: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0, helpers_1.recordHelperArgs)(tc, Object.assign({ prefix: 'UpdateMany', suffix: `${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input`, removeFields: ['id', '_id'], isRequired: true, allFieldsNullable: true }, opts === null || opts === void 0 ? void 0 : opts.record))), (0, helpers_1.filterHelperArgs)(tc, model, Object.assign({ prefix: 'FilterUpdateMany', suffix: `${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input` }, opts === null || opts === void 0 ? void 0 : opts.filter))), (0, helpers_1.sortHelperArgs)(tc, model, Object.assign({ sortTypeName: `SortUpdateMany${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input` }, opts === null || opts === void 0 ? void 0 : opts.sort))), (0, helpers_1.skipHelperArgs)()), (0, helpers_1.limitHelperArgs)(Object.assign({}, opts === null || opts === void 0 ? void 0 : opts.limit))),
        resolve: ((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const recordData = (_a = resolveParams === null || resolveParams === void 0 ? void 0 : resolveParams.args) === null || _a === void 0 ? void 0 : _a.record;
            if (!(typeof recordData === 'object') || Object.keys(recordData).length === 0) {
                return Promise.reject(new Error(`${tc.getTypeName()}.updateMany resolver requires at least one value in args.record`));
            }
            resolveParams.query = model.find();
            resolveParams.model = model;
            (0, helpers_1.filterHelper)(resolveParams, aliases);
            (0, helpers_1.skipHelper)(resolveParams);
            (0, helpers_1.sortHelper)(resolveParams);
            (0, helpers_1.limitHelper)(resolveParams);
            resolveParams.query = resolveParams.query.setOptions({ multi: true });
            if (resolveParams.query.updateMany) {
                resolveParams.query.updateMany({
                    $set: (0, toMongoDottedObject_1.toMongoDottedObject)(recordData, aliases),
                });
            }
            else {
                resolveParams.query.update({
                    $set: (0, toMongoDottedObject_1.toMongoDottedObject)(recordData, aliases),
                });
            }
            const res = yield (0, beforeQueryHelper_1.beforeQueryHelper)(resolveParams);
            if (res.modifiedCount || res.acknowledged) {
                return {
                    numAffected: res.modifiedCount,
                };
            }
            else if (res.ok) {
                return {
                    numAffected: res.n || res.nModified,
                };
            }
            throw new Error(JSON.stringify(res));
        })),
    });
    if (!(opts === null || opts === void 0 ? void 0 : opts.disableErrorField)) {
        (0, errorCatcher_1.addErrorCatcherField)(resolver);
    }
    return resolver;
}
exports.updateMany = updateMany;
//# sourceMappingURL=updateMany.js.map