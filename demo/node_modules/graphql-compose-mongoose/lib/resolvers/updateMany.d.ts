import type { Resolver, ObjectTypeComposer, InterfaceTypeComposer } from 'graphql-compose';
import type { Model, Document } from 'mongoose';
import { RecordHelperArgsOpts, FilterHelperArgsOpts, SortHelperArgsOpts, LimitHelperArgsOpts } from './helpers';
export interface UpdateManyResolverOpts {
    suffix?: string;
    record?: RecordHelperArgsOpts;
    filter?: FilterHelperArgsOpts | false;
    sort?: SortHelperArgsOpts | false;
    limit?: LimitHelperArgsOpts | false;
    skip?: false;
    disableErrorField?: boolean;
}
declare type TArgs = {
    record: any;
    filter?: any;
    limit?: number;
    skip?: number;
    sort?: string | string[] | Record<string, any>;
};
export declare function updateMany<TSource = any, TContext = any, TDoc extends Document = any>(model: Model<TDoc>, tc: ObjectTypeComposer<TDoc, TContext> | InterfaceTypeComposer<TDoc, TContext>, opts?: UpdateManyResolverOpts): Resolver<TSource, TContext, TArgs, TDoc>;
export {};
//# sourceMappingURL=updateMany.d.ts.map