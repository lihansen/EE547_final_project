"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataLoader = void 0;
const graphql_compose_1 = require("graphql-compose");
const helpers_1 = require("./helpers");
const beforeQueryHelper_1 = require("./helpers/beforeQueryHelper");
const dataLoaderHelper_1 = require("./helpers/dataLoaderHelper");
function dataLoader(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver dataLoader() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver dataLoader() should be instance of ObjectTypeComposer.');
    }
    const aliases = (0, helpers_1.prepareNestedAliases)(model.schema);
    const aliasesReverse = (0, helpers_1.prepareAliasesReverse)(model.schema);
    return tc.schemaComposer.createResolver({
        type: tc,
        name: 'dataLoader',
        kind: 'query',
        args: {
            _id: tc.hasField('_id') ? (0, graphql_compose_1.toInputType)(tc.getFieldTC('_id')).NonNull : 'MongoID!',
        },
        resolve: ((resolveParams) => {
            const args = resolveParams.args || {};
            if (!args._id) {
                return Promise.resolve(null);
            }
            if (!resolveParams.info) {
                throw new Error(`Cannot use ${tc.getTypeName()}.dataLoader resolver without 'info: GraphQLResolveInfo'`);
            }
            const dl = (0, dataLoaderHelper_1.getDataLoader)(resolveParams.context, resolveParams.info, (ids) => __awaiter(this, void 0, void 0, function* () {
                resolveParams.query = model.find({
                    _id: { $in: ids },
                });
                resolveParams.model = model;
                (0, helpers_1.projectionHelper)(resolveParams, aliases);
                if (opts === null || opts === void 0 ? void 0 : opts.lean) {
                    const result = (yield (0, beforeQueryHelper_1.beforeQueryHelperLean)(resolveParams)) || [];
                    return Array.isArray(result) && aliasesReverse
                        ? result.map((r) => (0, helpers_1.replaceAliases)(r, aliasesReverse))
                        : result;
                }
                else {
                    return (0, beforeQueryHelper_1.beforeQueryHelper)(resolveParams) || [];
                }
            }));
            return dl.load(args._id);
        }),
    });
}
exports.dataLoader = dataLoader;
//# sourceMappingURL=dataLoader.js.map